Work execution format -
    - comment marked task (//Task name)
    - completed task
    - comment after completion if required (//Helpful Findings)

- Create an object of parameterized type List<Integer>, add Integer to it and get Integer from it
- Create an object of raw type List, add Integer to it and get Integer from it
- Create an object of generic type ArrayList<T> with actual type parameter Integer without and with the diamond operator
- Use the generic method Collections.emptyList without and with type inference
- Implement a generic class (with or without generic constructors and methods) and create an object from it
- Implement a generic method in the non-generic class and create an object from it
- Implement a generic constructor in non-generic class and create an object from it
- Implement a generic method with bounded type parameter <T extends Number>, with a method parameter
    of generic type parameter List<T>, that uses the method Number.longValue to find the sum of the
    list elements to an accumulator of type long;
    call the method with arguments of parameterized types List<Integer>, List<Long>
- Assign object of type ArrayList<Integer> to reference of type List<Integer>
- Assign object of type ArrayList<Integer> to reference of type Collection<Integer>
- Assign objects of types ArrayList<Integer>, ArrayList<Double>,
    ArrayList<String> to reference of unbounded wildcard type List<?>
- Assign objects of types ArrayList<Integer>, ArrayList<Double>
    to reference of upper bounded wildcard type List<? extends Number> (pay attention to which list turned out)
- Assign objects of types ArrayList<Integer>, ArrayList<Number>, ArrayList<Object>
    to reference of lower bounded wildcard type List<? super Integer> (pay attention to which list turned out)
- Implement a generic method with a method parameter of parameterized type List<Object>,
    that uses the method System.out.println to print list elements;
    call the method with an argument of parameterized type List<Object>
- Implement a generic method with a method parameter of unbounded wildcard type List<?>,
    that uses the method System.out.println to print list elements;
    call the method with arguments of parameterized types List<Object>, List<Integer>, List<Double>
- Implement a generic method with a method parameter of upper bounded wildcard type List<? extends Number>,
    that uses the method Number.longValue to find the sum of the list elements to an accumulator of type long;
    call the method with arguments of parameterized types List<Integer>, List<Long> (PEcs: producer - extends)
- Implement a generic method with a method parameter of lower bounded wildcard type List<? super Integer>,
    that uses the method List.add to insert int elements to list;
    call the method with arguments of parameterized types List<Integer>, List<Number>, List<Object> (peCS: consumer - super)
- Show that impossible to use the instanceof operator with parameterized types
- Show that impossible to overload a method where the formal parameter types of each overload erase to the same raw type