- Зачем нужны дженерики? Можешь ли ты привести пример того, как дженерики делают программу более гибкой?
- Основная причина, по которой дженерики работают с объектами типа object? (Обртная совместимость)
- Как объявить универсальный класс? метод? поле? интерфейс?
- Какие типы запрещается использовать в обобщенных классах в качестве параметризованных типов? (примитивы)
- Можете ли вы объявить статические поля, типы которых являются параметрами универсального типа? (нет) Почему? (статика жестко привязана к классу)
- Что такое стирание типов?
    - Если при создании экземпляра объекта не указан общий тип, будет ли код компилироваться?
- Чем универсальный метод отличается от универсального типа?
- Что такое параметр ограниченного типа?
    - Правило PECS? Как работает extends и super в дженериках?
    - (*) Валидна ли будет запись <T super что-то>? (Нет, в ней нет особого смысла, потому как T в принимаем значении и так работает как <T extends Object>)
    - Можно ли объявить несколько параметров ограниченного типа?
- Что такое вайлкард?
    - Что такое вайлдкард с верхней/нижней границей?
    - Когда бы вы предпочли использовать вайлдкард с нижней границей по сравнению с типом с верхней границей?
    - Когда бы вы предпочли использовать генерик с нижней границей по сравнению с типом с верхней границей?

- * Могут ли инициализироваться объекты generic типа в generic методе? (Нет (Почему?), Да с помощью рефлекции)
- * Как выглядит код дженерик класса после компеляции?
- * Может ли дженерик класс наследоваться от интерфейса Throwable? (нет, лок на уровне JVM)
        - * и может ли использоваться как подставляемый тип дженерика класс который extends Throwable? (да, а почему нет)
- * Принятые обозначения дженериков? (T - ? R - ? E - ? ....)
