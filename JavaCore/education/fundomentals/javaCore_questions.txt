----- Java Language Fundamentals -----
- Почему язык Java

- Принципы ООП
    - Основные концепции каждого из принципов
    - Полностью ли Java OOP
        - Перегрузка и переопределение
    - Какие есть свойства объекта? (он уникален, у него есть свой набор параметров, у него есть свой набор поведения)
- Примитивы и Ссылочные типы данных
    - Зачем нужны одни и другие
    - Ситуации использования одних и других
    - Изменение значения примитива, поля, ссылочного типа при передаче в метод
    //Задание: valueTransfer
- Конструкторы (+ блоки инициализации)
    - Зачем нам использовать конструкторы
    - Типы конструкторов
    - Блоки инициализации
        - В каком порядке инициализируются
        - Может ли статический конструктор инициализировать обычные поля
        - Может ли описываться блок инициализации, если в классе вообще ничего нет кроме конструктора
- Типы классов Java
    - Enum
        - преимущества использования
        - объекты какой типа хранятся в Enum (enum.this)
    - Abstract Classes Vs Interface
        - Кто для какой цели, что крутого в каждом
    //Задание на обстракцию
- Модификаторы класса, метода, поля, доступа
    - Сигнатура методов, что можно объявить методу
    - Доступ: какие есть, когда какой использовать
    - Модификаторы классов (abstract, final, static)
    - Модификаторы методов (abstract, final, static, native, synchronized)
    - Модификаторы полей   (static, final, transient, volatile)
    - Назначение статики
    - Может ли класс быть статик
- Object.class
    - Как клонировать класс
    - Как правильно контролировать вложенности
- Class.class
    - Рефлекция
* - Можно-ли проинициализировать объект если все его поля приватные? (Да, если написать статику внутри класса которая будет это делать)
* - Два конструктора Cons(String) Cons(Integer) каким образом конструктор 1 может вызвать конструктор 2 (без инита нового объекта) (this)