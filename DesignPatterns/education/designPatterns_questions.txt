==== SOLID ====
- Для чего нужны принципы SOLID
- Каковы принципы SOLID
- Подробнее о каждом принципе (какую проблему он старается решить)
    - Single Responsibility Principle (Принцип единственной ответственности)
    - Open Close Principle  (Принцип открытости/закрытости)
    - Liskov Substitution Principle (Принцип подстановки Лисков)
    - Interface Segregation Principle (Принцип разделения интерфейса)
    - Dependency Inversion Principle (Принцип инверсии зависимостей)
==== Паттерны проектирования ====
- Что такое паттерны проектирования
- Плюсы паттернов
- Категории на которые деляться паттерны
    - Самые популярные паттерны
    - Детально о паттернах группы "Порождающие"
        - Фабрика
        - Абстрактная фабрика
        - Строитель
        - Прототип
        - Одиночка
    - Детально о паттернах группы "Структурные"
        - Адаптер
        - Мост
        - Компоновщик
        - Декоратор
        - Фасад
        - Легковес
        - Прокси
    - Детально о паттернах группы "Поведенческие"
        - Цепочка обязанностей
        - Команда
        - Итератор
        - Медиатор
        - Снимок
        - Наблюдатель
        - Состояние
        - Стратегия
        - Шаблонный метод
        - Посетитель
- В чем отличия от Адаптера/Декоратора/Прокси
- В чем отличия от Стратегия/Состояние
==== MVC ====
- Что такое MVC
==== GRASP ====
- Что такое GRASP
- Информационный эксперт
- Создатель (Creator)
- Контроллер (Controller)
- Слабое зацепление (Low Coupling)
- Высокая связность (High Cohesion)
- Полиморфизм (Polymorphism)
- Чистая выдумка (Pure Fabrication)
- Посредник (Indirection)
- Устойчивость к изменениям (Protected Variations)

https://refactoring.guru/ru/design-patterns/catalog
https://ru.wikipedia.org/wiki/SOLID
https://ru.wikipedia.org/wiki/GRASP